on:
  push:
    branches: [master]
  pull_request:

name: CI

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.10
    strategy:
      matrix:
        rust:
          - stable
          - beta
          - nightly
          - "1.48.0"
    steps:
      - run: apt-get update -y
      - run: apt-get install -y libgtk-3-dev libglib2.0-dev libgraphene-1.0-dev git xvfb curl libcairo-gobject2 libcairo2-dev
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      # atk
      # nightly
      - name: "atk: tests nightly"
        run: xvfb-run --auto-servernum cargo test --manifest-path atk/Cargo.toml --all-features
        if: matrix.rust == 'nightly'
      - name: "atk-sys: tests nightly"
        run: xvfb-run --auto-servernum cargo test --manifest-path atk/sys/Cargo.toml --all-features
        if: matrix.rust == 'nightly'
      - name: "atk: build nightly"
        run: cargo build --manifest-path atk/Cargo.toml --all-features
        if: matrix.rust == 'nightly'
      # not nightly
      - name: "atk: tests"
        run: xvfb-run --auto-servernum cargo test --manifest-path atk/Cargo.toml --features "v2_34"
        if: matrix.rust != 'nightly'
      - name: "atk-sys: tests"
        run: xvfb-run --auto-servernum cargo test --manifest-path atk/sys/Cargo.toml --features "v2_34"
        if: matrix.rust != 'nightly'
      - name: "atk: build"
        run: cargo build --manifest-path atk/Cargo.toml --features "v2_34"
        if: matrix.rust != 'nightly'
      # cairo
      - name: "cairo: tests"
        run: xvfb-run --auto-servernum cargo test --manifest-path cairo/Cargo.toml --features "png,pdf,svg,ps,use_glib,v1_16,freetype,script,xcb,xlib,win32-surface"
      - name: "cairo-sys: tests"
        run: xvfb-run --auto-servernum cargo test --manifest-path cairo/sys/Cargo.toml --features "png,pdf,svg,ps,use_glib,v1_16,freetype,script,xcb,xlib,win32-surface"
      - name: "cairo: build"
        run: cargo build --manifest-path cairo/Cargo.toml --features "png,pdf,svg,ps,use_glib,v1_16,freetype,script,xcb,xlib,win32-surface"
      # gdk
      - name: "gdk: tests nightly"
        run: xvfb-run --auto-servernum cargo test --manifest-path gdk/Cargo.toml --features v3_24
      - name: "gdk: build nightly"
        run: cargo build --manifest-path gdk/Cargo.toml --features v3_24
      # gdk-pixbuf
      # nightly
      - name: "gdk-pixbuf: tests nightly"
        run: xvfb-run --auto-servernum cargo test --manifest-path gdk-pixbuf/Cargo.toml --all-features
        if: matrix.rust == 'nightly'
      - name: "gdk-pixbuf-sys: tests"
        run: xvfb-run --auto-servernum cargo test --manifest-path gdk-pixbuf/sys/Cargo.toml --all-features
        if: matrix.rust == 'nightly'
      - name: "gdk-pixbuf: build nightly"
        run: cargo build --manifest-path gdk-pixbuf/Cargo.toml --all-features
        if: matrix.rust == 'nightly'
      # not nightly
      - name: "gdk-pixbuf: tests"
        run: xvfb-run --auto-servernum cargo test --manifest-path gdk-pixbuf/Cargo.toml --features "v2_40"
        if: matrix.rust != 'nightly'
      - name: "gdk-pixbuf-sys: tests"
        run: xvfb-run --auto-servernum cargo test --manifest-path gdk-pixbuf/sys/Cargo.toml --features "v2_40"
        if: matrix.rust != 'nightly'
      - name: "gdk-pixbuf: build"
        run: cargo build --manifest-path gdk-pixbuf/Cargo.toml --features "v2_40"
        if: matrix.rust != 'nightly'
      # gdkx11
      # nightly
      - name: "gdkx11: tests nightly"
        run: xvfb-run --auto-servernum cargo test --manifest-path gdkx11/Cargo.toml --all-features
        if: matrix.rust == 'nightly'
      - name: "gdkx11-sys: tests nightly"
        run: xvfb-run --auto-servernum cargo test --manifest-path gdkx11/sys/Cargo.toml --all-features
        if: matrix.rust == 'nightly'
      - name: "gdkx11: build nightly"
        run: cargo build --manifest-path gdkx11/Cargo.toml --all-features
        if: matrix.rust == 'nightly'
      # not nightly
      - name: "gdkx11: tests"
        run: xvfb-run --auto-servernum cargo test --manifest-path gdkx11/Cargo.toml --features "v3_24"
        if: matrix.rust != 'nightly'
      - name: "gdkx11-sys: tests"
        run: xvfb-run --auto-servernum cargo test --manifest-path gdkx11/sys/Cargo.toml --features "v3_24"
        if: matrix.rust != 'nightly'
      - name: "gdkx11: build"
        run: cargo build --manifest-path gdkx11/Cargo.toml --features "v3_24"
        if: matrix.rust != 'nightly'
      # gio
      # nightly
      - name: "gio: tests nightly"
        run: xvfb-run --auto-servernum cargo test --manifest-path gio/Cargo.toml --all-features
        if: matrix.rust == 'nightly'
      - name: "gio: build nightly"
        run: cargo build --manifest-path gio/Cargo.toml --all-features
        if: matrix.rust == 'nightly'
      # not nightly
      - name: "gio: tests"
        run: xvfb-run --auto-servernum cargo test --manifest-path gio/Cargo.toml --features "v2_66"
        if: matrix.rust != 'nightly'
      - name: "gio: build"
        run: cargo build --manifest-path gio/Cargo.toml --features "v2_66"
        if: matrix.rust != 'nightly'
      # glib
      # nightly
      - name: "glib: tests nightly"
        run: xvfb-run --auto-servernum cargo test --manifest-path glib/Cargo.toml --all-features
        if: matrix.rust == 'nightly'
      - name: "glib: build nightly"
        run: cargo build --manifest-path glib/Cargo.toml --all-features
        if: matrix.rust == 'nightly'
      - name: "glib: tests glib macros nightly"
        working-directory: glib
        run: python3 clone_tests/clone_compilation_errors.py
        if: matrix.rust == 'nightly'
      #not nightly
      - name: "glib: tests"
        run: xvfb-run --auto-servernum cargo test --manifest-path glib/Cargo.toml --features "v2_66"
        if: matrix.rust != 'nightly'
      - name: "glib: build"
        run: cargo build --manifest-path glib/Cargo.toml --features "v2_66"
        if: matrix.rust != 'nightly'
      - name: "glib: tests glib macros"
        working-directory: glib
        run: python3 clone_tests/clone_compilation_errors.py
        if: matrix.rust != 'nightly'
      # glib-macros
      - name: "glib-macros: tests"
        run: xvfb-run --auto-servernum cargo test --manifest-path glib-macros/Cargo.toml
      - name: "glib-macros: build"
        run: cargo build --manifest-path glib-macros/Cargo.toml
      # graphene
      # nightly
      - name: "graphene: tests nightly"
        run: xvfb-run --auto-servernum cargo test --manifest-path graphene/Cargo.toml --all-features
        if: matrix.rust == 'nightly'
      - name: "graphene: build nightly"
        run: cargo build --manifest-path graphene/Cargo.toml --all-features
        if: matrix.rust == 'nightly'
      # not nightly
      - name: "graphene: tests"
        run: xvfb-run --auto-servernum cargo test --manifest-path graphene/Cargo.toml --features "v1_10"
        if: matrix.rust != 'nightly'
      - name: "graphene: build"
        run: cargo build --manifest-path graphene/Cargo.toml --features "v1_10"
        if: matrix.rust != 'nightly'
      # gtk
      # nightly
      - name: "gtk: tests nightly"
        run: xvfb-run --auto-servernum cargo test --manifest-path gtk/Cargo.toml --all-features
        if: matrix.rust == 'nightly'
      - name: "gtk: build nightly"
        run: cargo build --manifest-path gtk/Cargo.toml --all-features
        if: matrix.rust == 'nightly'
      # not nightly
      - name: "gtk: tests"
        run: xvfb-run --auto-servernum cargo test --manifest-path gtk/Cargo.toml --features "v3_24_9"
        if: matrix.rust != 'nightly'
      - name: "gtk: build"
        run: cargo build --manifest-path gtk/Cargo.toml --features "v3_24_9"
        if: matrix.rust != 'nightly'
      # pango
      # nightly
      - name: "pango: tests nightly"
        run: xvfb-run --auto-servernum cargo test --manifest-path pango/Cargo.toml --all-features
        if: matrix.rust == 'nightly'
      - name: "pango: build nightly"
        run: cargo build --manifest-path pango/Cargo.toml --all-features
        if: matrix.rust == 'nightly'
      # not nightly
      - name: "pango: tests"
        run: xvfb-run --auto-servernum cargo test --manifest-path pango/Cargo.toml --features "v1_46"
        if: matrix.rust != 'nightly'
      - name: "pango: build"
        run: cargo build --manifest-path pango/Cargo.toml --features "v1_46"
        if: matrix.rust != 'nightly'
      # pangocairo
      # nightly
      - name: "pangocairo: tests nightly"
        run: xvfb-run --auto-servernum cargo test --manifest-path pangocairo/Cargo.toml --all-features
        if: matrix.rust == 'nightly'
      - name: "pangocairo-sys: tests nightly"
        run: xvfb-run --auto-servernum cargo test --manifest-path pangocairo/sys/Cargo.toml --all-features
        if: matrix.rust == 'nightly'
      - name: "pangocairo: build nightly"
        run: cargo build --manifest-path pangocairo/Cargo.toml --all-features
        if: matrix.rust == 'nightly'
      # not nightly
      - name: "pangocairo: tests"
        run: xvfb-run --auto-servernum cargo test --manifest-path pangocairo/Cargo.toml
        if: matrix.rust != 'nightly'
      - name: "pangocairo-sys: tests"
        run: xvfb-run --auto-servernum cargo test --manifest-path pangocairo/sys/Cargo.toml
        if: matrix.rust != 'nightly'
      - name: "pangocairo: build"
        run: cargo build --manifest-path pangocairo/Cargo.toml
        if: matrix.rust != 'nightly'
      # examples
      - name: "examples"
        run: cargo build --manifest-path examples/Cargo.toml --bins --examples --all-features

      - uses: bcomnes/cleanup-xvfb@v1

  build-win:
    name: build windows msys2
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          install: base-devel git mingw-w64-x86_64-gtk3
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      # atk
      #  XXX --target=x86_64-pc-windows-gnu
      - name: "atk: tests"
        run: cargo test --manifest-path atk/Cargo.toml --features "v2_34"
      - name: "atk-sys: tests"
        run: cargo test --manifest-path atk/sys/Cargo.toml --features "v2_34"
      - name: "atk: build"
        run: cargo build --manifest-path atk/Cargo.toml --features "v2_34"
      # cairo
      - name: "cairo: tests"
        run: cargo test --manifest-path cairo/Cargo.toml --features "png,pdf,svg,ps,use_glib,v1_16,freetype,script,xcb,xlib,win32-surface"
      - name: "cairo-sys: tests"
        run: cargo test --manifest-path cairo/sys/Cargo.toml --features "png,pdf,svg,ps,use_glib,v1_16,freetype,script,xcb,xlib,win32-surface"
      - name: "cairo: build"
        run: cargo build --manifest-path cairo/Cargo.toml --features "png,pdf,svg,ps,use_glib,v1_16,freetype,script,xcb,xlib,win32-surface"
      # gdk
      - name: "gdk: tests nightly"
        run: cargo test --manifest-path gdk/Cargo.toml --features v3_24
      - name: "gdk: build nightly"
        run: cargo build --manifest-path gdk/Cargo.toml --features v3_24
      # gdk-pixbuf
      - name: "gdk-pixbuf: tests"
        run: cargo test --manifest-path gdk-pixbuf/Cargo.toml --features "v2_40"
      - name: "gdk-pixbuf-sys: tests"
        run: cargo test --manifest-path gdk-pixbuf/sys/Cargo.toml --features "v2_40"
      - name: "gdk-pixbuf: build"
        run: cargo build --manifest-path gdk-pixbuf/Cargo.toml --features "v2_40"
      # gio
      - name: "gio: tests"
        run: cargo test --manifest-path gio/Cargo.toml --features "v2_66"
      - name: "gio: build"
        run: cargo build --manifest-path gio/Cargo.toml --features "v2_66"
      # glib
      - name: "glib: tests"
        run: cargo test --manifest-path glib/Cargo.toml --features "v2_66"
      - name: "glib: build"
        run: cargo build --manifest-path glib/Cargo.toml --features "v2_66"
      - name: "glib: tests glib macros"
        working-directory: glib
        run: python3 clone_tests/clone_compilation_errors.py
      # glib-macros
      - name: "glib-macros: tests"
        run: cargo test --manifest-path glib-macros/Cargo.toml
      - name: "glib-macros: build"
        run: cargo build --manifest-path glib-macros/Cargo.toml
      # gtk
      - name: "gtk: tests"
        run: cargo test --manifest-path gtk/Cargo.toml --features "v3_24_9"
      - name: "gtk: build"
        run: cargo build --manifest-path gtk/Cargo.toml --features "v3_24_9"
      # pango
      - name: "pango: tests"
        run: cargo test --manifest-path pango/Cargo.toml --features "v1_46"
      - name: "pango: build"
        run: cargo build --manifest-path pango/Cargo.toml --features "v1_46"
      # pangocairo
      - name: "pangocairo: tests"
        run: cargo test --manifest-path pangocairo/Cargo.toml
      - name: "pangocairo-sys: tests"
        run: cargo test --manifest-path pangocairo/sys/Cargo.toml
      - name: "pangocairo: build"
        run: cargo build --manifest-path pangocairo/Cargo.toml
      # examples
      - name: "examples"
        run: cargo build --manifest-path examples/Cargo.toml --bins --examples --all-features

  fmt:
    name: rust fmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: clippy
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.10
    steps:
      - run: apt-get update -y
      - run: apt-get install -y libgtk-3-dev libglib2.0-dev libgraphene-1.0-dev git xvfb curl libcairo-gobject2 libcairo2-dev
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add clippy

      - working-directory: atk
        name: atk
        run: cargo clippy --features "v2_34" --all-targets -- -D warnings

      - working-directory: cairo
        name: cairo
        run: cargo clippy --features "png,pdf,svg,ps,use_glib,v1_16,freetype,script,xcb,xlib,win32-surface" --all-targets -- -D warnings

      - working-directory: examples
        name: examples
        run: cargo clippy --all-features --all-targets -- -D warnings

      - working-directory: gdk
        name: gdk
        run: cargo clippy --features "v3_24" --all-targets -- -D warnings

      - working-directory: gdk-pixbuf
        name: gdk-pixbuf
        run: cargo clippy --features "v2_40" --all-targets -- -D warnings

      - working-directory: gdkx11
        name: gdkx11
        run: cargo clippy --features "v3_24" --all-targets -- -D warnings

      - working-directory: gio
        name: gio
        run: cargo clippy --features "v2_66" --all-targets -- -D warnings

      - working-directory: glib
        name: glib
        run: cargo clippy --features "v2_66" --all-targets -- -D warnings

      - working-directory: glib-macros
        name: glib-macros
        run: cargo clippy --all-targets -- -D warnings

      - working-directory:  graphene
        name: graphene
        run: cargo clippy --features "v1_10" --all-targets -- -D warnings

      - working-directory: gtk
        name: gtk
        run: cargo clippy --features "v3_24_9" --all-targets -- -D warnings

      - working-directory: pango
        name: pango
        run: cargo clippy --features "v1_46" --all-targets -- -D warnings

      - working-directory: pangocairo
        name: pangocairo
        run: cargo clippy --all-targets -- -D warnings

  generator:
    name: regen check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - run: python3 generator.py
      - run: git diff -R --exit-code

  checker:
    name: gtk-rs checker
    runs-on: ubuntu-latest
    strategy:
      matrix:
        crate:
          - { name: 'atk', extra: '' }
          - { name: 'cairo', extra: '--no-manual-traits' }
          - { name: 'gdk', extra: '' }
          - { name: 'gdk-pixbuf', extra: '' }
          - { name: 'gdkx11', extra: '' }
          - { name: 'gio', extra: '' }
          - { name: 'glib', extra: '' }
          - { name: 'glib-macros', extra: '--no-manual-traits' }
          - { name: 'graphene', extra: '' }
          - { name: 'gtk', extra: '' }
          - { name: 'gtk3-macros', extra: '--no-manual-traits' }
          - { name: 'pango', extra: '' }
          - { name: 'pangocairo', extra: '' }
    steps:
      - uses: actions/checkout@v2
      - uses: actions/checkout@v2
        with:
          repository: gtk-rs/checker
          ref: master
          path: checker
      - run: cargo build --release
        working-directory: checker
      - run: cargo run -- ${{matrix.crate.extra}} ../${{matrix.crate.name}}
        working-directory: checker
      - run: cargo run -- --no-license ../${{matrix.crate.name}}/sys
        working-directory: checker
        if: matrix.crate.extra == ''
      - run: ./check_init_asserts ../${{matrix.crate.name}}
        working-directory: checker
        if: matrix.crate == 'atk' || matrix.crate == 'gdk' || matrix.crate == 'gdkx11' || matrix.crate == 'gtk'
