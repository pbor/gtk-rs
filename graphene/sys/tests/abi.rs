// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use graphene_sys::*;
use std::mem::{align_of, size_of};
use std::str;

mod c_abi {
    #[derive(Copy, Clone, Debug, Eq, PartialEq)]
    #[repr(C)]
    pub struct CConstant {
        pub name: *const libc::c_char,
        pub value: *const libc::c_char,
    }

    #[derive(Copy, Clone, Debug, Eq, PartialEq)]
    #[repr(C)]
    pub struct CLayout {
        pub name: *const libc::c_char,
        pub size: usize,
        pub alignment: usize,
    }

    extern "C" {
        pub fn c_constants(n: *mut usize) -> *mut CConstant;
        pub fn c_constants_free(c: *mut CConstant, n: usize);
        pub fn c_layouts(n: *mut usize) -> *const CLayout;
    }
}

fn c_constants() -> Vec<(String, String)> {
    let mut res: Vec<(String, String)> = Vec::new();

    unsafe {
        let mut n = 0;
        let p = c_abi::c_constants(&mut n);
        let constants = std::slice::from_raw_parts(p, n);

        for c in constants {
            let c_name = std::ffi::CStr::from_ptr(c.name);
            let c_value = std::ffi::CStr::from_ptr(c.value);
            res.push((
                c_name.to_str().unwrap().to_owned(),
                c_value.to_str().unwrap().to_owned(),
            ));
        }

        c_abi::c_constants_free(p, n);
    }

    res
}

#[derive(Copy, Clone, Debug, Eq, PartialEq)]
struct Layout {
    size: usize,
    alignment: usize,
}

fn c_layouts() -> Vec<(String, Layout)> {
    let mut res = Vec::new();

    unsafe {
        let mut n = 0;
        let p = c_abi::c_layouts(&mut n);
        let layouts = std::slice::from_raw_parts(p, n);

        for l in layouts {
            let c_name = std::ffi::CStr::from_ptr(l.name);
            let name = c_name.to_str().unwrap().to_owned();
            let size = l.size;
            let alignment = l.alignment;
            res.push((name, Layout { size, alignment }));
        }
    }

    res
}

#[derive(Copy, Clone, Debug, Default, Eq, PartialEq)]
struct Results {
    /// Number of successfully completed tests.
    passed: usize,
    /// Total number of failed tests (including those that failed to compile).
    failed: usize,
}

impl Results {
    fn record_passed(&mut self) {
        self.passed += 1;
    }
    fn record_failed(&mut self) {
        self.failed += 1;
    }
    fn summary(&self) -> String {
        format!("{} passed; {} failed", self.passed, self.failed)
    }
    fn expect_total_success(&self) {
        if self.failed == 0 {
            println!("OK: {}", self.summary());
        } else {
            panic!("FAILED: {}", self.summary());
        };
    }
}

#[test]
fn cross_validate_constants_with_c() {
    let mut results = Results::default();

    for ((rust_name, rust_value), (c_name, c_value)) in
        RUST_CONSTANTS.iter().zip(c_constants().iter())
    {
        if rust_name != c_name {
            results.record_failed();
            eprintln!("Name mismatch:\nRust: {:?}\nC:    {:?}", rust_name, c_name,);
            continue;
        }

        if rust_value != c_value {
            results.record_failed();
            eprintln!(
                "Constant value mismatch for {}\nRust: {:?}\nC:    {:?}",
                rust_name, rust_value, &c_value
            );
            continue;
        }

        results.record_passed();
    }

    results.expect_total_success();
}

#[test]
fn cross_validate_layout_with_c() {
    let mut results = Results::default();

    for ((rust_name, rust_layout), (c_name, c_layout)) in
        RUST_LAYOUTS.iter().zip(c_layouts().iter())
    {
        if rust_name != c_name {
            results.record_failed();
            eprintln!("Name mismatch:\nRust: {:?}\nC:    {:?}", rust_name, c_name,);
            continue;
        }

        if rust_layout != c_layout {
            results.record_failed();
            eprintln!(
                "Layout mismatch for {}\nRust: {:?}\nC:    {:?}",
                rust_name, rust_layout, &c_layout
            );
            continue;
        }

        results.record_passed();
    }

    results.expect_total_success();
}

const RUST_LAYOUTS: &[(&str, Layout)] = &[];

const RUST_CONSTANTS: &[(&str, &str)] = &[
    ("(gint) GRAPHENE_EULER_ORDER_DEFAULT", "-1"),
    ("(gint) GRAPHENE_EULER_ORDER_RXYX", "19"),
    ("(gint) GRAPHENE_EULER_ORDER_RXYZ", "28"),
    ("(gint) GRAPHENE_EULER_ORDER_RXZX", "21"),
    ("(gint) GRAPHENE_EULER_ORDER_RXZY", "22"),
    ("(gint) GRAPHENE_EULER_ORDER_RYXY", "25"),
    ("(gint) GRAPHENE_EULER_ORDER_RYXZ", "26"),
    ("(gint) GRAPHENE_EULER_ORDER_RYZX", "20"),
    ("(gint) GRAPHENE_EULER_ORDER_RYZY", "23"),
    ("(gint) GRAPHENE_EULER_ORDER_RZXY", "24"),
    ("(gint) GRAPHENE_EULER_ORDER_RZXZ", "27"),
    ("(gint) GRAPHENE_EULER_ORDER_RZYX", "18"),
    ("(gint) GRAPHENE_EULER_ORDER_RZYZ", "29"),
    ("(gint) GRAPHENE_EULER_ORDER_SXYX", "7"),
    ("(gint) GRAPHENE_EULER_ORDER_SXYZ", "6"),
    ("(gint) GRAPHENE_EULER_ORDER_SXZX", "9"),
    ("(gint) GRAPHENE_EULER_ORDER_SXZY", "8"),
    ("(gint) GRAPHENE_EULER_ORDER_SYXY", "13"),
    ("(gint) GRAPHENE_EULER_ORDER_SYXZ", "12"),
    ("(gint) GRAPHENE_EULER_ORDER_SYZX", "10"),
    ("(gint) GRAPHENE_EULER_ORDER_SYZY", "11"),
    ("(gint) GRAPHENE_EULER_ORDER_SZXY", "14"),
    ("(gint) GRAPHENE_EULER_ORDER_SZXZ", "15"),
    ("(gint) GRAPHENE_EULER_ORDER_SZYX", "16"),
    ("(gint) GRAPHENE_EULER_ORDER_SZYZ", "17"),
    ("(gint) GRAPHENE_EULER_ORDER_XYZ", "0"),
    ("(gint) GRAPHENE_EULER_ORDER_XZY", "3"),
    ("(gint) GRAPHENE_EULER_ORDER_YXZ", "4"),
    ("(gint) GRAPHENE_EULER_ORDER_YZX", "1"),
    ("(gint) GRAPHENE_EULER_ORDER_ZXY", "2"),
    ("(gint) GRAPHENE_EULER_ORDER_ZYX", "5"),
    ("GRAPHENE_HAS_GCC", "1"),
    ("GRAPHENE_HAS_SCALAR", "1"),
    ("GRAPHENE_HAS_SSE", "1"),
    ("GRAPHENE_PI", "3.141593"),
    ("GRAPHENE_PI_2", "1.570796"),
    ("(gint) GRAPHENE_RAY_INTERSECTION_KIND_ENTER", "1"),
    ("(gint) GRAPHENE_RAY_INTERSECTION_KIND_LEAVE", "2"),
    ("(gint) GRAPHENE_RAY_INTERSECTION_KIND_NONE", "0"),
    ("GRAPHENE_SIMD_S", "sse"),
    ("GRAPHENE_VEC2_LEN", "2"),
    ("GRAPHENE_VEC3_LEN", "3"),
    ("GRAPHENE_VEC4_LEN", "4"),
];
